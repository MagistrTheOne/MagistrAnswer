import random
from typing import Dict, List

class SolutionGenerator:
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–æ–ª–∏
        self.name_templates = {
            '—Å—Ç—Ä–∞—Ö': ['FearBuster', 'CourageAI', 'BraveBot', 'AnxietySlayer'],
            '–æ—Ç—á–∞—è–Ω–∏–µ': ['HopeHub', 'SolutionFinder', 'ProblemCrusher', 'MiracleMaker'],
            '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ': ['SocialBridge', 'ConnectionAI', 'CommunityHub', 'FriendFinder'],
            '–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': ['ConfidenceBoost', 'DecisionHelper', 'ClarityAI', 'CertaintyBot'],
            '–¥–∞–≤–ª–µ–Ω–∏–µ': ['StressReliever', 'PressureEase', 'CalmAI', 'ZenBot'],
            '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ': ['UniqueYou', 'IndividualAI', 'PersonalPath', 'SelfValue']
        }
        
        # –ú–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–æ—Ñ–ª-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.meme_elements = [
            "—Å API –¥–ª—è —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞",
            "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tinder",
            "—á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω",
            "—Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º",
            "—á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å",
            "—Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
            "—á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞",
            "—Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
            "—á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "—Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã —Ä–µ—à–µ–Ω–∏–π
        self.solution_templates = [
            "AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä–∞—è {action} –∏ {benefit}",
            "–£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å, —Ä–µ—à–∞—é—â–∏–π {problem} —á–µ—Ä–µ–∑ {method}",
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ {solves} –∏ {improves}",
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±—É–¥—É—â–µ–≥–æ, –≥–¥–µ {feature} –ø–æ–º–æ–≥–∞–µ—Ç {outcome}"
        ]
    
    def generate_solution(self, pain_analysis: Dict[str, any]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SaaS-—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª–∏"""
        main_pain = pain_analysis.get('main_pain', '–æ–±—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞')
        pain_categories = pain_analysis.get('pain_categories', [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name = self._generate_name(pain_categories)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        description = self._generate_description(main_pain, pain_categories)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        meme_element = random.choice(self.meme_elements)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        full_solution = self._format_solution(name, description, meme_element)
        
        return {
            'name': name,
            'description': description,
            'meme_element': meme_element,
            'full_solution': full_solution,
            'pain_addressed': main_pain
        }
    
    def _generate_name(self, pain_categories: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
        if pain_categories:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–æ–ª–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
            category = pain_categories[0]
            if category in self.name_templates:
                return random.choice(self.name_templates[category])
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        general_names = ['ProblemSolver', 'PainKiller', 'SolutionAI', 'HelpBot']
        return random.choice(general_names)
    
    def _generate_description(self, main_pain: str, pain_categories: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
        template = random.choice(self.solution_templates)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        if "—Å—Ç—Ä–∞—Ö" in main_pain.lower():
            action = "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            benefit = "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è"
        elif "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ" in main_pain.lower():
            action = "—Å–æ–∑–¥–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"
            benefit = "–ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"
        elif "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in main_pain.lower():
            action = "–ø–æ–≤—ã—à–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ"
            benefit = "–¥–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"
        else:
            action = "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            benefit = "–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
        
        return template.format(
            action=action,
            benefit=benefit,
            problem=main_pain,
            method="–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            solves=main_pain,
            improves="–∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏",
            feature="—É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            outcome="—Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"
        )
    
    def _format_solution(self, name: str, description: str, meme_element: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –º–µ–º–Ω–æ–º —Å—Ç–∏–ª–µ"""
        return f"{name} ‚Äî {description} {meme_element}. –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å —Å–µ–±—è, –ø–æ—Ç–æ–º—É —á—Ç–æ {name} –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞! üöÄ"
    
    def generate_multiple_solutions(self, pain_analysis: Dict[str, any], count: int = 3) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏–π"""
        solutions = []
        for _ in range(count):
            solution = self.generate_solution(pain_analysis)
            solutions.append(solution)
        return solutions
