import requests
import random
import time
from bs4 import BeautifulSoup
from typing import List, Dict, Optional
import config

class QuestionParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': config.USER_AGENT,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.urls = [
            "https://otvet.mail.ru",
            "https://otvet.mail.ru/popular",
            "https://otvet.mail.ru/question",
            "https://otvet.mail.ru/answer"
        ]
    
    def get_random_question(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å Answer Mail.ru"""
        for url in self.urls:
            try:
                print(f"üîç –ü—Ä–æ–±—É—é URL: {url}")
                response = self.session.get(
                    url,
                    timeout=15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                    allow_redirects=True
                )
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                questions = self._extract_questions(soup)
                
                if questions:
                    question = random.choice(questions)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
                    time.sleep(config.DELAY_BETWEEN_REQUESTS)
                    return question
                
            except requests.exceptions.Timeout:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {url}")
                continue
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {url}: {e}")
                continue
            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
                continue
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ URL")
        return None
    
    def _extract_questions(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ HTML —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        questions = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        selectors = [
            '.question__text',
            '.question-title',
            '.question',
            'h2 a',
            '.qa-item__title',
            '.question-item__title',
            '.question-item__text',
            '.qa-question__title',
            '.qa-question__text',
            'h3 a',
            'h4 a',
            '.title a',
            '.text a',
            'a[href*="question"]',
            'a[href*="answer"]'
        ]
        
        for selector in selectors:
            try:
                elements = soup.select(selector)
                if elements:
                    print(f"üîç –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                    for element in elements[:15]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        text = element.get_text(strip=True)
                        if text and len(text) > 15 and len(text) < 200:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                            if any(word in text.lower() for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–º–æ–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏']):
                                questions.append({
                                    'text': text,
                                    'source': 'Answer Mail.ru'
                                })
                    if questions:
                        break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if not questions:
            questions = self._extract_questions_by_text(soup)
        
        return questions
    
    def _extract_questions_by_text(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏"""
        questions = []
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        links = soup.find_all('a', href=True)
        
        for link in links:
            text = link.get_text(strip=True)
            if text and len(text) > 20 and len(text) < 150:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                if any(word in text.lower() for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–º–æ–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏', '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ']):
                    questions.append({
                        'text': text,
                        'source': 'Answer Mail.ru'
                    })
                    if len(questions) >= 10:
                        break
        
        return questions
    
    def get_questions_by_category(self, category: str = "popular") -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            url = f"{config.ANSWER_MAIL_RU_URL}/{category}"
            response = self.session.get(url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            return self._extract_questions(soup)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return []
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        self.session.close()
