#!/usr/bin/env python3
"""
–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –±–æ–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏–π
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from typing import Dict, Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from parsers.question_parser import QuestionParser
from analyzers.pain_analyzer import PainAnalyzer
from generators.solution_generator import SolutionGenerator
from telegram_bot.bot import PrometheusBot
from telegram_bot.game_bot import GamePrometheusBot
import config

class PrometheusOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã '–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É'"""
    
    def __init__(self):
        self.question_parser = QuestionParser()
        self.pain_analyzer = PainAnalyzer()
        self.solution_generator = SolutionGenerator()
        self.stats = {
            'questions_processed': 0,
            'solutions_generated': 0,
            'pain_analyses': 0
        }
    
    def run_cli_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        print("üóø –í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –±–æ–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏–π!")
        print("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            print("üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
            question_data = self.question_parser.get_random_question()
            
            if not question_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º.")
                return
            
            print(f"\n‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}")
            print(f"üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}")
            print("-" * 60)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å
            print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—É—é –±–æ–ª—å...")
            pain_analysis = self.pain_analyzer.analyze_pain(question_data['text'])
            
            print(f"üíî **–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å:** {pain_analysis['main_pain']}")
            print(f"üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pain_analysis['confidence_score']:.0%}")
            print(f"üé≠ **–≠–º–æ—Ü–∏–∏:** {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}")
            print(f"‚ö° **–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {pain_analysis['urgency_level']}")
            print(f"üö® **–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {pain_analysis['severity_level']}")
            print(f"üéØ **–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:** {pain_analysis['question_type']}")
            print("-" * 60)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            print("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é SaaS-—Ä–µ—à–µ–Ω–∏–µ...")
            solution = self.solution_generator.generate_solution(pain_analysis)
            
            print(f"üöÄ **{solution['name']}**")
            print(f"üí° **–†–µ—à–µ–Ω–∏–µ:** {solution['full_solution']}")
            print(f"üéØ **–†–µ—à–∞–µ—Ç –±–æ–ª—å:** {solution['pain_addressed']}")
            print("-" * 60)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if pain_analysis.get('recommendations'):
                print("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                for i, rec in enumerate(pain_analysis['recommendations'][:3], 1):
                    print(f"   {i}. {rec}")
                print("-" * 60)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['questions_processed'] += 1
            self.stats['pain_analyses'] += 1
            self.stats['solutions_generated'] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüéØ **–ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–ì–ò–°–¢–†–ê:**")
            print("=" * 60)
            print(f"‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}")
            print(f"üíî **–ë–æ–ª—å:** {pain_analysis['main_pain']}")
            print(f"üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:** {solution['full_solution']}")
            print("=" * 60)
            print(f"üé≠ **–£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞:** 10/10")
            print(f"üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º:** 100%")
            print(f"üìä **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {self.stats['questions_processed']}")
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            self.question_parser.close()
    
    def run_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –æ–±—ã—á–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")
        bot = PrometheusBot()
        bot.run()
    
    def run_game_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞"""
        print("üéÆ –ó–∞–ø—É—Å–∫–∞—é –∏–≥—Ä–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞...")
        bot = GamePrometheusBot()
        bot.run()
    
    def run_interactive_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üóø –í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("=" * 60)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É")
            print("2. üî• –ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏")
            print("3. üí° SaaS-—Ä–µ—à–µ–Ω–∏–µ")
            print("4. üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            print("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("6. ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞")
            print("7. üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "1":
                self._handle_new_question_interactive()
            elif choice == "2":
                self._handle_pain_analysis_interactive()
            elif choice == "3":
                self._handle_solution_generation_interactive()
            elif choice == "4":
                self._handle_full_analysis_interactive()
            elif choice == "5":
                self._show_statistics()
            elif choice == "6":
                print("ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –æ–±—ã—á–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")
                self.run_telegram_bot()
                break
            elif choice == "7":
                print("üéÆ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∏–≥—Ä–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞...")
                self.run_game_bot()
                break
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _handle_new_question_interactive(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if not hasattr(self, '_current_question'):
            print("üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
            question_data = self.question_parser.get_random_question()
            
            if question_data:
                self._current_question = question_data
                self._current_pain_analysis = None
                self._current_solution = None
                
                print(f"\n‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}")
                print(f"üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}")
                self.stats['questions_processed'] += 1
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")
        else:
            print("‚ùì –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ.")
    
    def _handle_pain_analysis_interactive(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if not hasattr(self, '_current_question'):
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        if not self._current_pain_analysis:
            print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—É—é –±–æ–ª—å...")
            pain_analysis = self.pain_analyzer.analyze_pain(self._current_question['text'])
            self._current_pain_analysis = pain_analysis
            
            print(f"üíî **–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å:** {pain_analysis['main_pain']}")
            print(f"üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pain_analysis['confidence_score']:.0%}")
            print(f"üé≠ **–≠–º–æ—Ü–∏–∏:** {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}")
            print(f"‚ö° **–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {pain_analysis['urgency_level']}")
            print(f"üö® **–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {pain_analysis['severity_level']}")
            print(f"üéØ **–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:** {pain_analysis['question_type']}")
            
            if pain_analysis.get('recommendations'):
                print("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                for i, rec in enumerate(pain_analysis['recommendations'][:3], 1):
                    print(f"   {i}. {rec}")
            
            self.stats['pain_analyses'] += 1
        else:
            print("üß† –ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    
    def _handle_solution_generation_interactive(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if not hasattr(self, '_current_question'):
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        if not self._current_pain_analysis:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å!")
            return
        
        if not self._current_solution:
            print("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é SaaS-—Ä–µ—à–µ–Ω–∏–µ...")
            solution = self.solution_generator.generate_solution(self._current_pain_analysis)
            self._current_solution = solution
            
            print(f"üöÄ **{solution['name']}**")
            print(f"üí° **–†–µ—à–µ–Ω–∏–µ:** {solution['full_solution']}")
            print(f"üéØ **–†–µ—à–∞–µ—Ç –±–æ–ª—å:** {solution['pain_addressed']}")
            self.stats['solutions_generated'] += 1
        else:
            print("üí° –†–µ—à–µ–Ω–∏–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    
    def _handle_full_analysis_interactive(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if not hasattr(self, '_current_question'):
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        if not self._current_pain_analysis or not self._current_solution:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑!")
            return
        
        print("\nüéØ **–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–ì–ò–°–¢–†–ê:**")
        print("=" * 60)
        print(f"‚ùì **–í–æ–ø—Ä–æ—Å:** {self._current_question['text']}")
        print(f"üíî **–ë–æ–ª—å:** {self._current_pain_analysis['main_pain']}")
        print(f"üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:** {self._current_solution['full_solution']}")
        print("=" * 60)
        print(f"üé≠ **–£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞:** 10/10")
        print(f"üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º:** 100%")
    
    def _show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–ü–†–û–°–û–í –ú–ê–ì–ò–°–¢–†–ê:**")
        print("=" * 40)
        print(f"üóø **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {self.stats['questions_processed']}")
        print(f"üî• **–ê–Ω–∞–ª–∏–∑–æ–≤ –±–æ–ª–∏:** {self.stats['pain_analyses']}")
        print(f"üí° **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—à–µ–Ω–∏–π:** {self.stats['solutions_generated']}")
        print(f"üé≠ **–£—Ä–æ–≤–µ–Ω—å —Å–º–µ—Ö–∞ –≤ —á–∞—Ç–µ:** 9/10")
        print(f"üì± **–ú–µ–º–æ–≤ –≤ Telegram:** ‚àû")
        print(f"üí∞ **–ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, —Å–ø—Ä–æ—Å–∏–≤—à–∏—Ö '–∞ –º–æ–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ?':** 0 (–ø–æ–∫–∞)")
        print(f"üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ IPO:** 99.9%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã '–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É'...")
    
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "cli":
            orchestrator = PrometheusOrchestrator()
            orchestrator.run_cli_demo()
        elif mode == "bot":
            orchestrator = PrometheusOrchestrator()
            orchestrator.run_telegram_bot()
        elif mode == "game":
            orchestrator = PrometheusOrchestrator()
            orchestrator.run_game_bot()
        elif mode == "interactive":
            orchestrator = PrometheusOrchestrator()
            orchestrator.run_interactive_mode()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cli, bot, game, –∏–ª–∏ interactive")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        orchestrator = PrometheusOrchestrator()
        orchestrator.run_interactive_mode()

if __name__ == "__main__":
    main()
