import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from parsers.question_parser import QuestionParser
from analyzers.pain_analyzer import PainAnalyzer
from generators.solution_generator import SolutionGenerator
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PrometheusBot:
    def __init__(self):
        self.question_parser = QuestionParser()
        self.pain_analyzer = PainAnalyzer()
        self.solution_generator = SolutionGenerator()
        self.current_data = {}  # –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É", callback_data="new_question")],
            [InlineKeyboardButton("üî• –ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏", callback_data="analyze_pain")],
            [InlineKeyboardButton("üí° SaaS-—Ä–µ—à–µ–Ω–∏–µ", callback_data="generate_solution")],
            [InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="full_analysis")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ **–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –±–æ–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏–π!

–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SaaS-—Ä–µ—à–µ–Ω–∏—è –≤ –º–µ–º–Ω–æ–º —Å—Ç–∏–ª–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "new_question":
            await self.handle_new_question(query, user_id)
        elif query.data == "analyze_pain":
            await self.handle_pain_analysis(query, user_id)
        elif query.data == "generate_solution":
            await self.handle_solution_generation(query, user_id)
        elif query.data == "full_analysis":
            await self.handle_full_analysis(query, user_id)
        elif query.data == "statistics":
            await self.handle_statistics(query, user_id)
    
    async def handle_new_question(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        await query.edit_message_text("üîç –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
        
        try:
            question_data = self.question_parser.get_random_question()
            
            if question_data:
                self.current_data[user_id] = {
                    'question': question_data['text'],
                    'source': question_data['source']
                }
                
                keyboard = [
                    [InlineKeyboardButton("üî• –ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏", callback_data="analyze_pain")],
                    [InlineKeyboardButton("üí° SaaS-—Ä–µ—à–µ–Ω–∏–µ", callback_data="generate_solution")],
                    [InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="full_analysis")],
                    [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                text = f"""
üóø **–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É:**

‚ùì **–í–æ–ø—Ä–æ—Å:** "{question_data['text']}"
üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º:
                """
                
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_pain_analysis(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ–ª–∏"""
        if user_id not in self.current_data:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        question = self.current_data[user_id]['question']
        await query.edit_message_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—É—é –±–æ–ª—å...")
        
        try:
            pain_analysis = self.pain_analyzer.analyze_pain(question)
            self.current_data[user_id]['pain_analysis'] = pain_analysis
            
            keyboard = [
                [InlineKeyboardButton("üí° SaaS-—Ä–µ—à–µ–Ω–∏–µ", callback_data="generate_solution")],
                [InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="full_analysis")],
                [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"""
üî• **–ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏:**

‚ùì **–í–æ–ø—Ä–æ—Å:** "{question}"

üíî **–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å:** {pain_analysis['main_pain']}
üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pain_analysis['confidence_score']:.0%}
üé≠ **–≠–º–æ—Ü–∏–∏:** {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
‚ö° **–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {pain_analysis['urgency_level']}

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ!
            """
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_solution_generation(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è"""
        if user_id not in self.current_data:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        if 'pain_analysis' not in self.current_data[user_id]:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å!")
            return
        
        await query.edit_message_text("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é SaaS-—Ä–µ—à–µ–Ω–∏–µ...")
        
        try:
            pain_analysis = self.current_data[user_id]['pain_analysis']
            solution = self.solution_generator.generate_solution(pain_analysis)
            
            self.current_data[user_id]['solution'] = solution
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="full_analysis")],
                [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"""
üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:**

üöÄ **{solution['name']}**

{solution['full_solution']}

üéØ **–†–µ—à–∞–µ—Ç –±–æ–ª—å:** {solution['pain_addressed']}
            """
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_full_analysis(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        if user_id not in self.current_data:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return
        
        user_data = self.current_data[user_id]
        
        if 'pain_analysis' not in user_data or 'solution' not in user_data:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑!")
            return
        
        keyboard = [
            [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
üéØ **–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ú–∞–≥–∏—Å—Ç—Ä–∞:**

‚ùì **–í–æ–ø—Ä–æ—Å:** "{user_data['question']}"

üíî **–ë–æ–ª—å:** {user_data['pain_analysis']['main_pain']}

üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:** {user_data['solution']['full_solution']}

üé≠ **–£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞:** 10/10
üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º:** 100%
        """
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_statistics(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        keyboard = [
            [InlineKeyboardButton("üóø –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–æ–ø—Ä–æ—Å–æ–≤ –ú–∞–≥–∏—Å—Ç—Ä–∞:**

üé≠ **–£—Ä–æ–≤–µ–Ω—å —Å–º–µ—Ö–∞ –≤ —á–∞—Ç–µ:** 9/10
üì± **–ú–µ–º–æ–≤ –≤ Telegram:** ‚àû
üí∞ **–ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, —Å–ø—Ä–æ—Å–∏–≤—à–∏—Ö '–∞ –º–æ–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ?':** 0 (–ø–æ–∫–∞)
üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ IPO:** 99.9%

*–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*
        """
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not config.TELEGRAM_TOKEN:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
