import asyncio
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from parsers.question_parser import QuestionParser
from analyzers.pain_analyzer import PainAnalyzer
from generators.solution_generator import SolutionGenerator
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GamePrometheusBot:
    def __init__(self):
        self.question_parser = QuestionParser()
        self.pain_analyzer = PainAnalyzer()
        self.solution_generator = SolutionGenerator()
        self.user_sessions = {}  # –•—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.game_stats = {}      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
        
        # –ò–≥—Ä–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.game_categories = [
            '–ª—é–±–æ–≤—å', '—Ä–∞–±–æ—Ç–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Å–ª—É—á–∞–π–Ω–æ'
        ]
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–ò–≥—Ä–æ–∫"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'username': username,
            'score': 0,
            'questions_asked': 0,
            'current_question': None,
            'current_analysis': None,
            'current_solution': None,
            'game_mode': 'menu'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in self.game_stats:
            self.game_stats[user_id] = {
                'total_score': 0,
                'games_played': 0,
                'best_score': 0
            }
        
        welcome_text = f"""
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É"!**

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

üéØ **–¶–µ–ª—å –∏–≥—Ä—ã:** –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–ª—É—á–∞–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª–∏ –∏ SaaS-—Ä–µ—à–µ–Ω–∏—è!

üìä **–¢–≤–æ–π —Å—á–µ—Ç:** {self.user_sessions[user_id]['score']} –æ—á–∫–æ–≤
üèÜ **–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {self.game_stats[user_id]['best_score']} –æ—á–∫–æ–≤

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/play - üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/ask - ‚ùì –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
/category - üéØ –í–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/stats - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - ‚ùì –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("üéØ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="by_category")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä—ã", callback_data="leaderboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def play_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /play - –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        self.user_sessions[user_id]['score'] = 0
        self.user_sessions[user_id]['game_mode'] = 'playing'
        
        await self.start_game_round(update, user_id)
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ask - –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        self.user_sessions[user_id]['game_mode'] = 'waiting_question'
        
        await update.message.reply_text(
            "‚ùì **–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:**\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—É—é –±–æ–ª—å!",
            parse_mode='Markdown'
        )
    
    async def category_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /category - –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        keyboard = []
        for i in range(0, len(self.game_categories), 2):
            row = []
            row.append(InlineKeyboardButton(
                self.game_categories[i].title(), 
                callback_data=f"cat_{self.game_categories[i]}"
            ))
            if i + 1 < len(self.game_categories):
                row.append(InlineKeyboardButton(
                    self.game_categories[i + 1].title(), 
                    callback_data=f"cat_{self.game_categories[i + 1]}"
                ))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ **–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        session = self.user_sessions[user_id]
        stats = self.game_stats[user_id]
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {session['username']}**

üéÆ **–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞:**
   –°—á–µ—Ç: {session['score']} –æ—á–∫–æ–≤
   –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {session['questions_asked']}

üèÜ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}
   –û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score']} –æ—á–∫–æ–≤
   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']} –æ—á–∫–æ–≤

üéØ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
   {'ü•á –ú–∞—Å—Ç–µ—Ä –±–æ–ª–∏' if stats['best_score'] >= 100 else 'ü•à –ó–Ω–∞—Ç–æ–∫' if stats['best_score'] >= 50 else 'ü•â –ù–æ–≤–∏—á–æ–∫'}
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ "–í–æ–ø—Ä–æ—Å –ú–∞–≥–∏—Å—Ç—Ä—É"**

üéÆ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ò—Å–ø–æ–ª—å–∑—É–π /play –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
2. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π –æ—á–∫–∏
3. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º–∞–Ω–¥–æ–π /ask
4. –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /category

üéØ **–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:**
   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª–∏: +10 –æ—á–∫–æ–≤
   ‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: +5 –æ—á–∫–æ–≤
   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: +3 –æ—á–∫–∞

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
   ‚Ä¢ –ù–æ–≤–∏—á–æ–∫: 0-49 –æ—á–∫–æ–≤
   ‚Ä¢ –ó–Ω–∞—Ç–æ–∫: 50-99 –æ—á–∫–æ–≤
   ‚Ä¢ –ú–∞—Å—Ç–µ—Ä –±–æ–ª–∏: 100+ –æ—á–∫–æ–≤

üì± **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   /play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
   /ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
   /category - –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   /help - –≠—Ç–∞ –ø–æ–º–æ—â—å

üé≠ **–†–û–§–õ–û-–∫–æ–º–∞–Ω–¥—ã:**
   /rofl - üé≠ –†–æ—Ñ–ª–æ –≤–æ–ø—Ä–æ—Å
   /bazar - üó£Ô∏è –ò—É —ç—Ç–æ –±–∞–∑–∞—Ä–∏—à—å –¥–∞?
   /shiza - üßò –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —à–∏–∑–∞
   /vazshe - ü§î –ü–æ–ª–Ω—ã–π —Ä–æ—Ñ–ª–æ-–∞–Ω–∞–ª–∏–∑
   /demo50 - üöÄ –î–µ–º–æ 50 —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å–æ–≤

üé≠ **–¶–µ–ª—å:** –°—Ç–∞–Ω—å –ª—É—á—à–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º –±–æ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º SaaS-—Ä–µ—à–µ–Ω–∏–π!
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def rofl_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /rofl - —Ä–æ—Ñ–ª–æ –≤–æ–ø—Ä–æ—Å"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å
        question_data = self.question_parser.get_random_question()
        
        if not question_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å —Å —Ä–æ—Ñ–ª–æ-—Å—Ç–∏–ª–µ–º
        pain_analysis = self.pain_analyzer.analyze_pain(question_data['text'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–æ—Ñ–ª–æ-—Ä–µ—à–µ–Ω–∏–µ
        solution = self.solution_generator.generate_solution(pain_analysis)
        
        # –†–æ—Ñ–ª–æ-—Ä–µ–π—Ç–∏–Ω–≥
        rofl_level = self._calculate_rofl_level(pain_analysis, solution)
        
        rofl_text = f"""
üé≠ **–†–û–§–õ–û-–í–û–ü–†–û–° –ú–ê–ì–ò–°–¢–†–ê:**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}
üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}

üíî **–ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏ (—Ä–æ—Ñ–ª–æ-—Å—Ç–∏–ª—å):**
   üö® –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å: {pain_analysis['main_pain']}
   üé≠ –≠–º–æ—Ü–∏–∏: {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
   ‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {pain_analysis['urgency_level']}
   üö® –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {pain_analysis['severity_level']}

üí° **–†–û–§–õ–û-SaaS-—Ä–µ—à–µ–Ω–∏–µ:**
   üöÄ **{solution['name']}**
   {solution['full_solution']}

üéØ **–†–û–§–õ–û-—Ä–µ–π—Ç–∏–Ω–≥:**
   {rofl_level['stars']} **–£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞:** {rofl_level['description']}
   üí∞ **–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞:** {rofl_level['startup_value']}
   üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ IPO:** {rofl_level['ipo_readiness']}
   ‚è∞ **–í—Ä–µ–º—è –¥–æ –≤—ã—Ö–æ–¥–∞:** {rofl_level['exit_time']}

üé≠ **–ú–∞–≥–∏—Å—Ç—Ä —Å–∫–∞–∑–∞–ª:** {rofl_level['magistr_quote']}
        """
        
        keyboard = [
            [InlineKeyboardButton("üé≠ –ï—â–µ —Ä–æ—Ñ–ª–æ", callback_data="more_rofl")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(rofl_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def bazar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /bazar - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_data = self.question_parser.get_random_question()
        
        if not question_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–∞–∑–∞—Ä–∞.")
            return
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        pain_analysis = self.pain_analyzer.analyze_pain(question_data['text'])
        
        bazar_text = f"""
üó£Ô∏è **–ò–£ –≠–¢–û –ë–ê–ó–ê–†–ò–®–¨ –î–ê?**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}

üí• **–ê–ì–†–ï–°–°–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó:**
   üö® **–ë–û–õ–¨:** {pain_analysis['main_pain'].upper()}
   üò§ **–≠–ú–û–¶–ò–ò:** {', '.join(pain_analysis['emotions']).upper() if pain_analysis['emotions'] else '–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–´'}
   ‚ö° **–°–†–û–ß–ù–û–°–¢–¨:** {pain_analysis['urgency_level'].upper()}
   üö® **–°–ï–†–¨–ï–ó–ù–û–°–¢–¨:** {pain_analysis['severity_level'].upper()}

üí° **–ë–ê–ó–ê–†-–†–ï–®–ï–ù–ò–ï:**
   üöÄ **{self._generate_bazar_solution_name(pain_analysis)}**
   {self._generate_bazar_solution(pain_analysis)}

üéØ **–ë–ê–ó–ê–†-–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
   üí™ **–£—Ä–æ–≤–µ–Ω—å –±–∞–∑–∞—Ä–∞:** {self._calculate_bazar_level(pain_analysis)}
   üó£Ô∏è **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±–∞–∑–∞—Ä—É:** 100%
   üöÄ **IPO —á–µ—Ä–µ–∑:** {random.choice(['–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é', '—É–∂–µ –≤—á–µ—Ä–∞'])}
        """
        
        keyboard = [
            [InlineKeyboardButton("üó£Ô∏è –ï—â–µ –±–∞–∑–∞—Ä", callback_data="more_bazar")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(bazar_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def shiza_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /shiza - –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —à–∏–∑–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_data = self.question_parser.get_random_question()
        
        if not question_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —à–∏–∑—ã.")
            return
        
        # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        pain_analysis = self.pain_analyzer.analyze_pain(question_data['text'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        solution = self.solution_generator.generate_solution(pain_analysis)
        
        shiza_text = f"""
üßò **–ö–†–ï–ê–¢–ò–í–ù–û–ï –®–ò–ó–ê:**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}

üß† **–ö–†–ï–ê–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó:**
   üí´ **–ë–û–õ–¨:** {pain_analysis['main_pain']}
   üåà **–≠–ú–û–¶–ò–ò:** {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
   ‚ú® **–°–†–û–ß–ù–û–°–¢–¨:** {pain_analysis['urgency_level']}
   üåü **–°–ï–†–¨–ï–ó–ù–û–°–¢–¨:** {pain_analysis['severity_level']}

üí° **–ö–†–ï–ê–¢–ò–í–ù–û–ï –®–ò–ó–ê-–†–ï–®–ï–ù–ò–ï:**
   üöÄ **{solution['name']}**
   {solution['full_solution']}

üé® **–ö–†–ï–ê–¢–ò–í–ù–û–°–¢–¨:**
   üåà **–£—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–∞:** {self._calculate_creativity_level(pain_analysis)}
   üßò **–®–∏–∑–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** {random.randint(80, 120)}%
   üí´ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫—Ä–µ–∞—Ç–∏–≤—É:** –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å%
   üöÄ **IPO —á–µ—Ä–µ–∑:** {random.choice(['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π', '—É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ'])}
        """
        
        keyboard = [
            [InlineKeyboardButton("üßò –ï—â–µ —à–∏–∑–∞", callback_data="more_shiza")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(shiza_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def vazshe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /vazshe - –ø–æ–ª–Ω—ã–π —Ä–æ—Ñ–ª–æ-–∞–Ω–∞–ª–∏–∑"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_data = self.question_parser.get_random_question()
        
        if not question_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∞—â–µ.")
            return
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        pain_analysis = self.pain_analyzer.analyze_pain(question_data['text'])
        solution = self.solution_generator.generate_solution(pain_analysis)
        
        # –†–æ—Ñ–ª–æ-—Ä–µ–π—Ç–∏–Ω–≥
        rofl_level = self._calculate_rofl_level(pain_analysis, solution)
        
        vazshe_text = f"""
ü§î **–í–ê–©–ï –ü–û–õ–ù–´–ô –†–û–§–õ–û-–ê–ù–ê–õ–ò–ó:**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}
üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}

üß† **–ê–ù–ê–õ–ò–ó –ë–û–õ–ò:**
   üíî –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å: {pain_analysis['main_pain']}
   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pain_analysis['confidence_score']:.0%}
   üé≠ –≠–º–æ—Ü–∏–∏: {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
   ‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {pain_analysis['urgency_level']}
   üö® –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {pain_analysis['severity_level']}
   üéØ –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {pain_analysis['question_type']}

üí° **SaaS-–†–ï–®–ï–ù–ò–ï:**
   üöÄ **{solution['name']}**
   {solution['full_solution']}
   üéØ –†–µ—à–∞–µ—Ç –±–æ–ª—å: {solution['pain_addressed']}

üé≠ **–†–û–§–õ–û-–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
   {rofl_level['stars']} **–£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞:** {rofl_level['description']}
   üí∞ **–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞:** {rofl_level['startup_value']}
   üöÄ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ IPO:** {rofl_level['ipo_readiness']}
   ‚è∞ **–í—Ä–µ–º—è –¥–æ –≤—ã—Ö–æ–¥–∞:** {rofl_level['exit_time']}
   üéØ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Ñ–ª–∞:** {random.randint(50, 200)}%

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join([f"   ‚Ä¢ {rec}" for rec in pain_analysis['recommendations'][:3]])}

üé≠ **–ú–∞–≥–∏—Å—Ç—Ä —Å–∫–∞–∑–∞–ª:** {rofl_level['magistr_quote']}
        """
        
        keyboard = [
            [InlineKeyboardButton("ü§î –ï—â–µ –≤–∞—â–µ", callback_data="more_vazshe")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(vazshe_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "start_game":
            await self.start_game_round(query, user_id)
        elif query.data == "ask_question":
            await self.handle_ask_question(query, user_id)
        elif query.data == "by_category":
            await self.show_categories(query, user_id)
        elif query.data == "show_stats":
            await self.show_user_stats(query, user_id)
        elif query.data == "leaderboard":
            await self.show_leaderboard(query, user_id)
        elif query.data.startswith("cat_"):
            category = query.data[4:]
            await self.get_question_by_category(query, user_id, category)
        elif query.data == "analyze_pain":
            await self.analyze_pain_game(query, user_id)
        elif query.data == "generate_solution":
            await self.generate_solution_game(query, user_id)
        elif query.data == "next_question":
            await self.start_game_round(query, user_id)
        elif query.data == "end_game":
            await self.end_game(query, user_id)
        elif query.data == "more_rofl":
            await self.rofl_command(query, context)
        elif query.data == "more_bazar":
            await self.bazar_command(query, context)
        elif query.data == "more_shiza":
            await self.shiza_command(query, context)
        elif query.data == "more_vazshe":
            await self.vazshe_command(query, context)
        elif query.data == "main_menu":
            await self.start(query, context)
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if user_id not in self.user_sessions:
            return
        
        session = self.user_sessions[user_id]
        
        if session['game_mode'] == 'waiting_question':
            await self.process_user_question(update, user_id, message_text)
        elif session['game_mode'] == 'playing':
            # –í –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            await self.handle_game_answer(update, user_id, message_text)
    
    async def start_game_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_data = self.question_parser.get_random_question()
        
        if not question_data:
            await self.send_message(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏–∏
        self.user_sessions[user_id]['current_question'] = question_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        keyboard = [
            [InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å", callback_data="analyze_pain")],
            [InlineKeyboardButton("üéØ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="next_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
üéÆ **–†–∞—É–Ω–¥ {self.user_sessions[user_id]['questions_asked'] + 1}**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question_data['text']}
üìç **–ò—Å—Ç–æ—á–Ω–∏–∫:** {question_data['source']}

**–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?**
        """
        
        await self.send_message(update, text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def process_user_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, question_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_data = self.question_parser.process_user_question(question_text)
        self.user_sessions[user_id]['current_question'] = question_data
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å
        pain_analysis = self.pain_analyzer.analyze_pain(question_text)
        self.user_sessions[user_id]['current_analysis'] = pain_analysis
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        solution = self.solution_generator.generate_solution(pain_analysis)
        self.user_sessions[user_id]['current_solution'] = solution
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        points = self._calculate_points(pain_analysis, solution)
        self.user_sessions[user_id]['score'] += points
        self.user_sessions[user_id]['questions_asked'] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"""
‚ùì **–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:** {question_text}

üß† **–ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏:**
   üíî –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å: {pain_analysis['main_pain']}
   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pain_analysis['confidence_score']:.0%}
   üé≠ –≠–º–æ—Ü–∏–∏: {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
   ‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {pain_analysis['urgency_level']}
   üö® –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {pain_analysis['severity_level']}

üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:**
   üöÄ {solution['name']}
   {solution['full_solution']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join([f"   ‚Ä¢ {rec}" for rec in pain_analysis['recommendations'][:3]])}

üéØ **–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:** +{points}
üèÜ **–û–±—â–∏–π —Å—á–µ—Ç:** {self.user_sessions[user_id]['score']}
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(result_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        self.user_sessions[user_id]['game_mode'] = 'menu'
    
    async def analyze_pain_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ–ª—å –≤ –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        user_id = update.effective_user.id
        session = self.user_sessions[user_id]
        
        if not session['current_question']:
            await self.send_message(update, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
            return
        
        question = session['current_question']
        pain_analysis = self.pain_analyzer.analyze_pain(question['text'])
        session['current_analysis'] = pain_analysis
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑
        analysis_points = 10
        session['score'] += analysis_points
        
        text = f"""
üß† **–ê–Ω–∞–ª–∏–∑ –±–æ–ª–∏:**

‚ùì **–í–æ–ø—Ä–æ—Å:** {question['text']}

üíî **–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å:** {pain_analysis['main_pain']}
üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pain_analysis['confidence_score']:.0%}
üé≠ **–≠–º–æ—Ü–∏–∏:** {', '.join(pain_analysis['emotions']) if pain_analysis['emotions'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
‚ö° **–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {pain_analysis['urgency_level']}
üö® **–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {pain_analysis['severity_level']}
üéØ **–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:** {pain_analysis['question_type']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join([f"   ‚Ä¢ {rec}" for rec in pain_analysis['recommendations'][:2]])}

üéØ **–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:** +{analysis_points}
üèÜ **–û–±—â–∏–π —Å—á–µ—Ç:** {session['score']}

**–¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SaaS-—Ä–µ—à–µ–Ω–∏–µ!**
        """
        
        keyboard = [
            [InlineKeyboardButton("üí° SaaS-—Ä–µ—à–µ–Ω–∏–µ", callback_data="generate_solution")],
            [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_message(update, text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def generate_solution_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        user_id = update.effective_user.id
        session = self.user_sessions[user_id]
        
        if not session['current_analysis']:
            await self.send_message(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å")
            return
        
        solution = self.solution_generator.generate_solution(session['current_analysis'])
        session['current_solution'] = solution
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ
        solution_points = 5
        session['score'] += solution_points
        session['questions_asked'] += 1
        
        text = f"""
üí° **SaaS-—Ä–µ—à–µ–Ω–∏–µ:**

üöÄ **{solution['name']}**

{solution['full_solution']}

üéØ **–†–µ—à–∞–µ—Ç –±–æ–ª—å:** {solution['pain_addressed']}

üéØ **–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:** +{solution_points}
üèÜ **–û–±—â–∏–π —Å—á–µ—Ç:** {session['score']}
üìä **–í–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏–≥—Ä–µ:** {session['questions_asked']}

**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É?**
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_message(update, text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def _calculate_points(self, pain_analysis: dict, solution: dict) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –æ—Ç–≤–µ—Ç"""
        points = 0
        
        # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑
        points += 10
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        if pain_analysis['confidence_score'] > 0.8:
            points += 5
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è
        if '–º–µ–º–Ω—ã–π' in solution.get('meme_element', '').lower():
            points += 3
        
        return points
    
    async def send_message(self, update: Update, text: str, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if hasattr(update, 'edit_message_text'):
            await update.edit_message_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not config.TELEGRAM_TOKEN:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("play", self.play_command))
        application.add_handler(CommandHandler("ask", self.ask_command))
        application.add_handler(CommandHandler("category", self.category_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("rofl", self.rofl_command))
        application.add_handler(CommandHandler("bazar", self.bazar_command))
        application.add_handler(CommandHandler("shiza", self.shiza_command))
        application.add_handler(CommandHandler("vazshe", self.vazshe_command))
        application.add_handler(CommandHandler("demo50", self.demo50_command))
        
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
    
    async def demo50_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /demo50 - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 50 —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å–æ–≤"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_sessions:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        await update.message.reply_text("üé≠ **–ó–∞–ø—É—Å–∫–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é 50 —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å–æ–≤...**\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥! ‚è≥", parse_mode='Markdown')
        
        # –ü–æ–ª—É—á–∞–µ–º 50 –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = self.question_parser.get_multiple_questions(50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        demo_results = []
        for i, question in enumerate(questions[:50], 1):
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å
                pain_analysis = self.pain_analyzer.analyze_pain(question['text'])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
                solution = self.solution_generator.generate_solution(pain_analysis)
                
                # –†–æ—Ñ–ª–æ-—Ä–µ–π—Ç–∏–Ω–≥
                rofl_level = self._calculate_rofl_level(pain_analysis, solution)
                
                demo_results.append({
                    'number': i,
                    'question': question,
                    'pain_analysis': pain_analysis,
                    'solution': solution,
                    'rofl_level': rofl_level
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
                if i % 10 == 0:
                    progress_text = f"üéØ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {i}/50\nüöÄ **–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑...**"
                    await update.message.reply_text(progress_text, parse_mode='Markdown')
                    
            except Exception as e:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                demo_results.append({
                    'number': i,
                    'question': question,
                    'pain_analysis': {'main_pain': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', 'confidence_score': 0.1},
                    'solution': {'name': 'ErrorBot', 'full_solution': '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ä–æ—Ñ–ª–æ-–∞–Ω–∞–ª–∏–∑–µ'},
                    'rofl_level': {'stars': 'üåü', 'description': '–û—à–∏–±–∫–∞ —Ä–æ—Ñ–ª–∞'}
                })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self._show_demo50_summary(update, demo_results)
    
    async def _show_demo50_summary(self, update: Update, demo_results: list):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_questions = len(demo_results)
        roflo_questions = sum(1 for r in demo_results if r['question']['type'] == 'roflo')
        real_questions = total_questions - roflo_questions
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_confidence = sum(r['pain_analysis']['confidence_score'] for r in demo_results) / total_questions
        avg_rofl_level = sum(len(r['rofl_level']['stars']) for r in demo_results) / total_questions
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö —Ä–æ—Ñ–ª–æ-—Ä–µ—à–µ–Ω–∏–π
        top_solutions = sorted(demo_results, key=lambda x: x['solution'].get('rofl_level', 0), reverse=True)[:5]
        
        summary_text = f"""
üé≠ **–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 50 –†–û–§–õ–û-–í–û–ü–†–û–°–û–í –ó–ê–í–ï–†–®–ï–ù–ê!**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}
   ‚Ä¢ –†–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å—ã: {roflo_questions}
   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {real_questions}
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Ñ–ª–æ-—É—Ä–æ–≤–µ–Ω—å: {avg_rofl_level:.1f} –∑–≤–µ–∑–¥

üèÜ **–¢–û–ü-5 —Å–∞–º—ã—Ö —Ä–æ—Ñ–ª–æ-—Ä–µ—à–µ–Ω–∏–π:**

"""
        
        for i, result in enumerate(top_solutions, 1):
            summary_text += f"""
{i}. **{result['solution']['name']}**
   ‚ùì –í–æ–ø—Ä–æ—Å: {result['question']['text'][:50]}...
   üíî –ë–æ–ª—å: {result['pain_analysis']['main_pain']}
   {result['rofl_level']['stars']} –£—Ä–æ–≤–µ–Ω—å —Ä–æ—Ñ–ª–∞: {result['rofl_level']['description']}
   üí∞ –û—Ü–µ–Ω–∫–∞: {result['rofl_level']['startup_value']}
"""
        
        summary_text += f"""

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /rofl –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–æ—Ñ–ª–æ-–≤–æ–ø—Ä–æ—Å–æ–≤
   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /bazar –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   ‚Ä¢ /shiza –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —à–∏–∑–∞
   ‚Ä¢ /vazshe –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–æ—Ñ–ª–æ-–∞–Ω–∞–ª–∏–∑–∞

üöÄ **–ì–æ—Ç–æ–≤ –∫ IPO:** {len([r for r in demo_results if 'IPO' in str(r['rofl_level'])])} —Ä–µ—à–µ–Ω–∏–π!
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üé≠ –ï—â–µ —Ä–æ—Ñ–ª–æ", callback_data="more_rofl")],
            [InlineKeyboardButton("üó£Ô∏è –ë–∞–∑–∞—Ä", callback_data="more_bazar")],
            [InlineKeyboardButton("üßò –®–∏–∑–∞", callback_data="more_shiza")],
            [InlineKeyboardButton("ü§î –í–∞—â–µ", callback_data="more_vazshe")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(summary_text, reply_markup=reply_markup, parse_mode='Markdown')
